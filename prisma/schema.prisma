// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int     @id @default(autoincrement())
  phone     String? @unique
  email     String? @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
  items     Item[]
  posts     Post[]
  writtenReviews  Review[] @relation(name: "writtenReviews")
  receivedReviews Review[] @relation(name: "receivedReviews")
  records   Record[]
  answers     Answer[]
  wonderings  Wondering[]
  streams   Stream[]
  messages  Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Item {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Float
  description String   @db.MediumText
  records     Record[]
  favCount    Int      @default(0)

  @@index([userId])
}

model Post {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    String   @db.MediumText
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     Answer[]
  wonderings  Wondering[]

  @@index([userId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createBy     User     @relation(name:"writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createFor    User     @relation(name:"receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int

  @@index([createdById])
  @@index([createdForId])
}

model Answer {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answer      String   @db.MediumText()

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Record {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId      Int
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recordKind  RecordKind

  @@index([userId])
  @@index([itemId])
}

enum RecordKind {
  Fav
  Purchase
  Sale
}

model Stream {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String   @db.MediumText
    price       Int
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    messages    Message[]

    @@index([userId])
}

model Message {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    message     String   @db.MediumText
    stream      Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
    streamId    Int

    @@index([userId])
    @@index([streamId])
}